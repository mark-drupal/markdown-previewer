{"version":3,"sources":["previewer.js","defaultstate.js","editor.js","App.js","reportWebVitals.js","index.js"],"names":["Previewer","props","marked","setOptions","breaks","console","log","markedDown","input","$","ready","html","id","className","for","defaultState","Editor","onChange","event","change","target","value","setState","state","userinput","bind","class","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAoDeA,EAvCG,SAAUC,GAGxBC,IAAOC,WAAW,CAChBC,QAAQ,IAGVC,QAAQC,IAAI,+DACZD,QAAQC,IAAI,mCACZD,QAAQC,IAAI,+DAGZ,IAAIC,EAAaL,IAAOD,EAAMO,OAehC,OAdEH,QAAQC,IAAI,wBAA0BC,GAGtCF,QAAQC,IAAI,mEACZD,QAAQC,IAAI,8BACZG,IAAE,YAAYC,OAAM,WAClBD,IAAE,YAAYE,KAAKJ,MAIrBE,IAAE,YAAYE,KAAKJ,GAEnBF,QAAQC,IAAI,8BAGZ,qBAAKM,GAAG,oBAAmBC,UAAU,aAArC,SACE,uBAAMD,GAAG,QAAT,UACE,uBAAOA,GAAG,gBAAgBE,IAAI,WAA9B,0CACA,qBAAKF,GAAG,kBCGDG,MA/Cf,WA4CE,MA3CqB,mmCCmERC,E,kDArDb,WAAYf,GAAO,IAAD,8BAEhB,cAAMA,IAeRgB,SAAW,SAACC,GAEV,IAAIC,EAASD,EAAME,OAAOC,MAG1B,EAAKC,UAAS,SAAAC,GACV,OAAOA,EAAMC,UAAYL,MAjB7B,EAAKI,MAAQ,CACXC,UAAWT,KAGbV,QAAQC,IAAI,uCACZD,QAAQC,IAAI,iCAAmC,EAAKiB,MAAMf,OAC1DH,QAAQC,IAAI,wDAEZ,EAAKa,OAAS,EAAKF,SAASQ,KAAd,gBAdE,E,qDAgChB,OACE,sBAAKC,MAAM,aAAX,UACE,uBAAMd,GAAG,OAAT,UACE,uBAAOA,GAAG,gBAAgBE,IAAI,UAA9B,+CACA,0BACED,UAAU,yBACVD,GAAG,SACHS,MAAOM,KAAKJ,MAAMC,UAClBP,SAAUU,KAAKV,SAASQ,KAAKE,MAJ/B,uCAQF,cAAC,EAAD,CACEnB,MAAOmB,KAAKJ,MAAMC,mB,GA/CPI,IAAMC,WCDZC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b55915d4.chunk.js","sourcesContent":["/*This project forms a part of the freecodecamp projects for front end libarys\nwhich you can find at https://www.freecodecamp.org/learn/\n\nThis specific project is the https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer\n\nThe aim of this class is produce a previewer for this project*/\n\n/*Import statements*/\n\nimport React from 'react';\nimport marked from 'marked';\nimport $ from 'jquery';\n\nconst Previewer = function (props){\n\n    //allows carigde returns and lines breaks with marked!\n    marked.setOptions({\n      breaks: true\n    });\n\n    console.log(\"***********************************************************\");\n    console.log(\"   RUNNING MarkDown conversion \");\n    console.log(\"***********************************************************\");\n\n    //markdown input\n    let markedDown = marked(props.input);\n    console.log(\"\\n MarkedDown input: \" + markedDown);\n\n    ///convert to html\n    console.log(\"\\n\\n***********************************************************\");\n    console.log(\"\\n\\nadding HTML to the div\");\n    $('#preview').ready(function() {\n      $('#preview').html(markedDown);\n      //jquery to allow fading\n\n    });\n    $('#preview').html(markedDown);\n\n    console.log(\" html added to preview div\");\n\n  return(\n    <div id=\"#previewcontainer\"className=\"container \">\n      <form id=\"#form\">\n        <label id=\"#editor-label\" for=\"#preview\">Preview your markdown below:</label>\n        <div id='preview'>\n        </div>\n      </form>\n    </div>\n\n  );\n}\n\nexport default Previewer;\n","function defaultState(){\n  const defaultState = \"# Welcome to my React Markdown Previewer!\"\n    +\"\\n## This is a sub-heading...\"\n    +\"\\n### And here's some other cool stuff:\"\n    +\"\\n\"\n    +\"\\nHeres some code, `<div></div>`, between 2 backticks.\"\n    +\"\\n\"\n    +\"\\n```\"\n    +\"\\n// this is multi-line code:\"\n    +\"\\n\"\n    +\"\\nfunction anotherExample(firstLine, lastLine) {\"\n    +\"\\n if (firstLine == '```' && lastLine == '```') {\"\n    +\"\\n    return multiLineCode;\"\n    +\"\\n  }\"\n    +\"\\n}\"\n    +\"\\n```\"\n    +\"\\n\"\n    +\"\\nYou can also make text **bold**... whoa!\"\n    +\"\\nOr _italic_.\"\n    +\"\\nOr... wait for it... **_both!_**\"\n    +\"\\nAnd feel free to go crazy ~~crossing stuff out~~.\"\n    +\"\\n\"\n    +\"\\nThere's also [links](https://www.freecodecamp.com), and\"\n    +\"\\n> Block Quotes!\"\n    +\"\\n\"\n    +\"\\nAnd if you want to get really crazy, even tables:\"\n    +\"\\n\"\n    +\"\\nWild Header | Crazy Header | Another Header?\"\n    +\"\\n------------ | ------------- | -------------\"\n    +\"\\nYour content can | be here, and it | can be here....\"\n    +\"\\nAnd here. | Okay. | I think we get it.\"\n    +\"\\n\"\n    +\"\\n- And of course there are lists.\"\n    +\"\\n  - Some are bulleted.\"\n    +\"\\n     - With different indentation levels.\"\n    +\"\\n          - That look like this.\"\n    +\"\\n\"\n    +\"\\n\"\n    +\"\\n1. And there are numbererd lists too.\"\n    +\"\\n1. Use just 1s if you want!\"\n    +\"\\n1. And last but not least, let's not forget embedded images:\"\n    +\"\\n\"\n    +\"\\n![React Logo w/ Text](https://goo.gl/Umyytc)\"\n\n  return defaultState;\n}\n\nexport default defaultState;\n","/*This project forms a part of the freecodecamp projects for front end libarys\nwhich you can find at https://www.freecodecamp.org/learn/\n\nspecific project is the https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer\n\naim of this class is produce a editor interface for this project*/\n\n/*Import statements*/\n\nimport React from 'react';\nimport Previewer from './previewer.js';\nimport defaultState from './defaultstate.js'\n\nclass Editor extends React.Component{\n\n  constructor(props){\n    ///create the react component\n    super(props);\n\n\n    ///state variables\n    this.state = {\n      userinput: defaultState()\n    }\n\n    console.log(\"\\n\\nEditor being constructed...\\n\\n\");\n    console.log(\"Current default input is: \\n\\n\" + this.state.input);\n    console.log(\"**************************************************\\n\");\n    ///bind methods to the class\n    this.change = this.onChange.bind(this);\n  }\n\n  onChange = (event) => {\n    //the value of what the user hs typed into the text editor\n    let change = event.target.value;\n\n    //update the input state\n    this.setState(state => {\n        return state.userinput = change;\n    });\n\n  }\n\n  render(){\n    /*Use Case #1 involves making a textarea in HTML with the id=editor*/\n\n\n    return(\n      <div class=\"App-header\">\n        <form id=\"form\">\n          <label id=\"#editor-label\" for=\"#editor\">Type some mark down text in here:</label>\n          <textarea\n            className=\"container form-control\"\n            id=\"editor\"\n            value={this.state.userinput}\n            onChange={this.onChange.bind(this)}\n            >type some text in here</textarea>\n\n        </form>\n        <Previewer\n          input={this.state.userinput}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default Editor;\n","\nimport './App.css';\nimport Editor from './editor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}